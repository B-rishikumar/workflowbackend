# =============================================
# Docker Compose for WorkflowManagement
# =============================================

version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: workflowmanagement-sqlserver
    hostname: sqlserver
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: WorkflowManagement@2024!
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./scripts/database:/docker-entrypoint-initdb.d
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P WorkflowManagement@2024! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: workflowmanagement-redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/deployment/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # WorkflowManagement API
  api:
    build:
      context: .
      dockerfile: scripts/deployment/Dockerfile
      args:
        BUILD_VERSION: "1.0.0"
        BUILD_DATE: ${BUILD_DATE}
        GIT_COMMIT: ${GIT_COMMIT}
    container_name: workflowmanagement-api
    hostname: api
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=WorkflowManagementDB;User Id=sa;Password=WorkflowManagement@2024!;TrustServerCertificate=true;MultipleActiveResultSets=true;
      - ConnectionStrings__Redis=redis:6379
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - JWT__SecretKey=WorkflowManagementSecretKeyForJWTTokenGeneration123456789
      - JWT__Issuer=WorkflowManagement
      - JWT__Audience=WorkflowManagementUsers
      - JWT__ExpiryMinutes=60
      - Cors__AllowedOrigins=http://localhost:3000,http://localhost:3001
      - RateLimiting__Enabled=true
      - RateLimiting__RequestsPerMinute=100
      - Email__SmtpHost=smtp.gmail.com
      - Email__SmtpPort=587
      - Email__EnableSsl=true
      - Email__Username=${EMAIL_USERNAME}
      - Email__Password=${EMAIL_PASSWORD}
      - Swagger__Enabled=true
      - HealthChecks__Enabled=true
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    volumes:
      - api_logs:/app/logs
      - api_temp:/app/temp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Background Service for Scheduled Workflows
  scheduler:
    build:
      context: .
      dockerfile: scripts/deployment/Dockerfile.scheduler
    container_name: workflowmanagement-scheduler
    hostname: scheduler
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=WorkflowManagementDB;User Id=sa;Password=WorkflowManagement@2024!;TrustServerCertificate=true;MultipleActiveResultSets=true;
      - ConnectionStrings__Redis=redis:6379
      - Logging__LogLevel__Default=Information
      - Scheduler__Enabled=true
      - Scheduler__IntervalSeconds=60
      - Scheduler__MaxConcurrentExecutions=10
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    volumes:
      - scheduler_logs:/app/logs

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: workflowmanagement-nginx
    hostname: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - workflowmanagement-network
    restart: unless-stopped

  # Elasticsearch for Logging (Optional)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: workflowmanagement-elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    profiles:
      - logging

  # Kibana for Log Visualization (Optional)
  kibana:
    image: kibana:8.11.0
    container_name: workflowmanagement-kibana
    hostname: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    profiles:
      - logging

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: workflowmanagement-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: workflowmanagement-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./scripts/deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - workflowmanagement-network
    restart: unless-stopped
    profiles:
      - monitoring

# Networks
networks:
  workflowmanagement-network:
    driver: bridge
    name: workflowmanagement-network

# Volumes
volumes:
  sqlserver_data:
    name: workflowmanagement-sqlserver-data
    driver: local
  redis_data:
    name: workflowmanagement-redis-data
    driver: local
  api_logs:
    name: workflowmanagement-api-logs
    driver: local
  api_temp:
    name: workflowmanagement-api-temp
    driver: local
  scheduler_logs:
    name: workflowmanagement-scheduler-logs
    driver: local
  nginx_logs:
    name: workflowmanagement-nginx-logs
    driver: local
  elasticsearch_data:
    name: workflowmanagement-elasticsearch-data
    driver: local
  prometheus_data:
    name: workflowmanagement-prometheus-data
    driver: local
  grafana_data:
    name: workflowmanagement-grafana-data
    driver: local

# Health check configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 60s